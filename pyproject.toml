[build-system]
requires = ["flit"]
build-backend = "flit.buildapi"

[project]
name = "pvcast"
authors = [{ name = "Stefan de Lange", email = "langestefan@msn.com" }]
description = "Open-source python package to make short-term solar power forecasts."
readme = "README.md"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Framework :: FastAPI",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
]
requires-python = ">=3.11.4"
dynamic = ["version"]

dependencies = [
    "numpy==1.26.3",
    "pandas==2.1.4",
    "polars==0.19.19",
    "pvlib==0.10.3",
    "pyyaml==6.0.1",
    "beautifulsoup4==4.12.2",
    "voluptuous==0.14.1",
    "fastapi==0.103.1",
    "uvicorn==0.23.2",
    "lxml==4.9.4",
    "websockets==12.0",
]

[project.optional-dependencies]
test = [
    "black==23.3.0",
    "ruff==0.1.13",
    "pyarrow==14.0.2",
    "pytest==7.3.1",
    "pytest-cov==4.0.0",
    "pytest-mock<3.10.1",
    "pytest-xdist==3.3.1",
    "mock==5.0.2",
    "responses==0.23.1",
    "mypy==1.7.0",
    "covdefaults==2.3.0",
    "codespell==2.2.6",
    "coverage[toml]==7.3.2",
    "pre-commit==3.5.0",
    "pre-commit-hooks==4.5.0",
    "pylint==3.0.3",
    "safety==2.4.0b2",
    "yamllint==1.33.0",
    "types-requests==2.31.0.20240106",
    "types-pytz==2023.3.1.1",
]

[project.urls]
Documentation = "https://github.com/langestefan/pvcast"
Source = "https://github.com/langestefan/pvcast"
Tracker = "https://github.com/langestefan/pvcast/issues"

[tool.flit.module]
name = "python_package"

[tool.black]
line-length = 88
fast = true

[tool.coverage.run]
branch = true
omit = ["pvcast/__main__.py"]
plugins = ["covdefaults"]
source = ["pvcast"]

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.pyright]
include = ["pvcast"]
exclude = ["**/__pycache__"]

reportMissingImports = true
reportMissingTypeStubs = false

pythonVersion = "3.11.6"
pythonPlatform = "Linux"

executionEnvironments = [{ root = "pvcast" }]

[tool.pytest.ini_options]
addopts = "--cov-report xml:coverage.xml --cov pvcast --cov-fail-under 0 --cov-append -m 'not integration' --cov-report term-missing"
pythonpath = ["src"]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
testpaths = "tests"
junit_family = "xunit2"
markers = [
    "integration: marks as integration test",
    "notebooks: marks as notebook test",
    "gpu: marks as gpu test",
    "slow: marks tests as slow",
    "unit: fast offline tests",
]

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "ex", "fp", "i", "id", "j", "k", "on", "Run", "T"]

[tool.pylint.DESIGN]
max-attributes = 8

[tool.pylint."MESSAGES CONTROL"]
disable = ["format", "unsubscriptable-object"]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.ruff]
target-version = "py311"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
ignore = [
    "ANN101",  # Self... explanatory
    "ANN401",  # Opinioated warning on disallowing dynamically typed expressions
    "D203",    # Conflicts with other rules
    "D213",    # Conflicts with other rules
    "D417",    # False positives in some occasions
    "PLR2004", # Just annoying, not really useful

    # Conflicts with the Ruff formatter
    "COM812",
    "ISC001",
]
select = ["ALL"]

# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.isort]
known-first-party = ["pvcast"]

[tool.ruff.mccabe]
max-complexity = 25
